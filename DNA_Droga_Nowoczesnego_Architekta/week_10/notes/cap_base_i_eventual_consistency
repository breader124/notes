Składowe CAP:
  - spójność (consistency) - wszystkie klienty widzą ten sam stan danych
  - dostępność (availability) - każdy klient może pisać/czytać
  - tolerancja partycji (partition tolerance) - system funkcjonuje poprawnie mimo wystąpienia podziału sieci (split-brain)
  - wybierz dwa z powyższych, parafrazując przykład z życia, nie może być szybko, tanio i dobrze na raz

Pary w CAP:
  - C + A - MySQL, Postgres
  - A + P - Cassandra, CouchDB, Riak
  - C + P - HBase, MongoDB, Redis

-----------------------------------------------------------------------------------------------------

Model spójności BASE:
  - Basically Available - wysoka dostępność
  - Soft state - wystarczająco świeże
  - Eventual consistency - odroczone osiągnięcie spójności:
    - wybieramy dostępność kosztem spójności
    - teoretyczna gwarancja, że zakładając brak modyfikacji zasobu, ostatecznie wszystkie odczyty
      będą zwracały najnowszą wartość
    - zmienne sterujące Eventual Consistency:
      - N - liczba węzłów klastra
      - W - węzły uczestniczące w zapisie, ile węzłów musi potwierdzić zapis
      - R - węzły uczestniczące w odczycie
    - słaba spójność - (N = 3, W = 1, R = 1) / (N = 3, W = 2, R = 1)
    - silna spójność - (N = 3, W = 3, R = 1) / (N = 3, W = 1, R = 3) / (N = 3, W = 2, R = 2)

Dobór parametrów spójności:
  - spójność:
    - silna: W + R >  N
    - słaba: W + R <= N
  - wydajność:
    - odczytu: W >> R
    - zapisu: R >> W
