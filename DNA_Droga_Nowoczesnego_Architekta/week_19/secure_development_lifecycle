Secure Development Lifecycle:
  - skupiamy się na przesuwaniu weryfikacji bezpieczeństwa "w lewo"
  - DevSecOps

Bezpieczny kod źródłowy:
  - OWASP Top 10 - lista 10 najczęściej atakowanych elementów i sposobów ataków na systemy IT
  - Mitre CWE Top 25 - spełnia podobne zadanie do OWASP Top 10
  - Software Composition Analysis:
    - OWASP Dependency Check
    - GitHub / GitLab


SAST (Static Application Security Testing)
  - opiera się całkowicie na analizie kodu źródłowego
  - naruszenia są raportowane na poziomie poszczególnych linii
  - analizuje już na poziomie PRów
  - zawsze skupiamy się na tym, żeby analiza SAST wskazywała 0 problemów

DAST (Dynamic Application Security Testing)
  - wymaga działającej aplikacji
  - wykrywa naruszenia wynikające z błędnej konfiguracji
  - często ciężko jest powiązać naruszenie z kodem

IAST (Interactive Application Security Testing)
  - pasywny - analizuje zinstrumentowaną aplikację odpowiadającą na "zwykły" ruch
  - aktywny - poszukuje błędów w instrumentowanym kodzie podczas wykonywania DAST

RASP (Runtime Application Security Protection)
  - aktywne i pasywne reagowanie na incydenty
    - logowanie i alerting
    - blokowanie "złośliwych" żądań


Testy penetracyjne:
  - "zewnętrzna" kontrola bezpieczeństwa
  - weryfikacja szczelności wszystkich poprzednich kroktów
  - bug bounty - płacenie freelancerom za znajdowanie dziur w swoich systemach

Bezpieczna infrastruktura:
  - skanowanie infrastruktury:
    - sieć
    - vm
    - obrazy kontenerów
  - dbanie o aktualizacje komponentów


IDS / IDP
  - Intrustion Detection System:
    - informuje o próbach ataku
    - Host-Based Intrusion Detection Systems (HIDS)
    - Network-Based Intrustion Detection Systems (NIDS)
  - Intrusion Prevention System
    - blokuje "złośliwy" ruch


Popularne standardy:
  - ISO 27001
  - ISO 27017
  - SOC 2
  - NIST
